// App.jsx
import React from "react";
import SecretForm from "./components/SecretForm";

export default function App() {
  return (
    <div className="min-h-screen bg-gray-100 p-6">
      <div className="max-w-2xl mx-auto bg-white shadow-xl rounded-2xl p-6">
        <h1 className="text-2xl font-bold mb-4">Sealed Secret Generator</h1>
        <SecretForm />
      </div>
    </div>
  );
}

// SecretForm.jsx
import React, { useState } from "react";
import { encryptSecret } from "../utils/encrypt";
import yaml from "js-yaml";

export default function SecretForm() {
  const [publicKey, setPublicKey] = useState(null);
  const [sealedSecret, setSealedSecret] = useState("");

  const handleKeyUpload = (e) => {
    const file = e.target.files?.[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = (e) => {
        setPublicKey(e.target?.result);
      };
      reader.readAsText(file);
    }
  };

  const handleYamlUpload = (e) => {
    const file = e.target.files?.[0];
    if (!file || !publicKey) return;
    const reader = new FileReader();
    reader.onload = async (e) => {
      try {
        const secret = yaml.load(e.target?.result);
        const { metadata, data } = secret;
        const namespace = metadata.namespace || "default";
        const name = metadata.name;
        const encryptedData = {};

        for (const key in data) {
          const value = atob(data[key]);
          encryptedData[key] = await encryptSecret(publicKey, value);
        }

        const sealed = yaml.dump({
          apiVersion: "bitnami.com/v1alpha1",
          kind: "SealedSecret",
          metadata: { name, namespace },
          spec: {
            encryptedData,
            template: { metadata: { name, namespace } },
          },
        });

        setSealedSecret(sealed);
        saveToMemory(name, sealed);
      } catch (err) {
        console.error("Failed to generate sealed secret", err);
      }
    };
    reader.readAsText(file);
  };

  const saveToMemory = (name, yamlContent) => {
    const file = new File([yamlContent], `${name}-sealedsecret.yaml`, { type: "text/yaml" });
    if (window.showSaveFilePicker) {
      (async () => {
        try {
          const handle = await window.showSaveFilePicker({
            suggestedName: `${name}-sealedsecret.yaml`,
            types: [
              {
                description: "YAML file",
                accept: { "text/yaml": [".yaml"] },
              },
            ],
          });
          const writable = await handle.createWritable();
          await writable.write(file);
          await writable.close();
        } catch (err) {
          console.error("File save cancelled or failed", err);
        }
      })();
    } else {
      const blob = new Blob([yamlContent], { type: "text/yaml" });
      const link = document.createElement("a");
      link.href = URL.createObjectURL(blob);
      link.download = `${name}-sealedsecret.yaml`;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    }
  };

  return (
    <div className="space-y-4">
      <input type="file" accept=".pem" onChange={handleKeyUpload} />
      <input type="file" accept=".yaml,.yml" onChange={handleYamlUpload} />
      {sealedSecret && (
        <pre className="whitespace-pre-wrap bg-gray-100 p-4 rounded">
          {sealedSecret}
        </pre>
      )}
    </div>
  );
}

// encrypt.js
import forge from "node-forge";

export async function encryptSecret(publicKeyPem, value) {
  let publicKey;
  try {
    if (publicKeyPem.includes("BEGIN CERTIFICATE")) {
      const cert = forge.pki.certificateFromPem(publicKeyPem);
      publicKey = cert.publicKey;
    } else {
      publicKey = forge.pki.publicKeyFromPem(publicKeyPem);
    }
  } catch (err) {
    throw new Error("Unsupported PEM format");
  }

  const encrypted = publicKey.encrypt(value, "RSA-OAEP", {
    md: forge.md.sha256.create(),
  });
  return forge.util.encode64(encrypted);
}
